# OpenAPI Specificationのバージョン
openapi: 3.0.3

# APIの基本情報
info:
  title: "アイテム管理API"
  description: |-
    自宅にある消耗品の在庫を、カテゴリ別に一元管理する機能を提供します。
    - **データモデル**: 全ユーザー共通の「デフォルトカテゴリ」と、ユーザーが個別に作成する「カスタムカテゴリ」「アイテム」で構成されます。
    - **認証**: 全てのエンドポイントFirebase AuthenticationのIDトークンが必要です。
  version: "1.0.0"

# APIサーバーの情報
servers:
  - url: http://localhost:8080

# APIのタグ（グループ化）
tags:
  - name: Category
    description: カテゴリ管理機能
  - name: Item
    description: アイテム管理機能

# API全体に適用するセキュリティ設定
security:
  - FirebaseBearerAuth: []

# パスとエンドポイントの定義
paths:
  #----------------------------------
  # カテゴリ関連
  #----------------------------------
  /categories:
    get:
      tags:
        - Category
      summary: カテゴリ一覧を取得
      description: |-
        デフォルトカテゴリと、ログインユーザーが作成したカスタムカテゴリを合算した一覧を取得する。
        - deletedフラグがfalseのレコードのみが対象
        - 辞書順にソートして表示する
      responses:
        "200":
          description: カテゴリ一覧の取得に成功しました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Category
      summary: カスタムカテゴリを新規作成
      description: |-
        新しいカテゴリを1件作成する
        - カテゴリ名は必須
        - カテゴリ名は50文字以内
        - デフォルトカテゴリ及びログインユーザーのカスタムカテゴリ内で、カテゴリ名が重複しない
        - ユーザーが作成できるカスタムカテゴリは50件まで
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        "201":
          description: カテゴリの作成が完了しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        "400":
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                name_required:
                  summary: (*1) カテゴリ名が空
                  value:
                    code: "CATEGORY_NAME_REQUIRED"
                    message: "カテゴリ名は必須です"
                name_too_long:
                  summary: (*2) カテゴリ名が50文字超過
                  value:
                    code: "CATEGORY_NAME_TOO_LONG"
                    message: "カテゴリ名は50文字以内で入力してください"
                limit_exceeded:
                  summary: (*4) カテゴリ登録上限
                  value:
                    code: "CATEGORY_LIMIT_EXCEEDED"
                    message: "登録できるカテゴリの上限に達しています"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "409":
          description: そのカテゴリ名は既に使用されています
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "CATEGORY_NAME_DUPLICATE"
                message: "そのカテゴリ名は既に使用されています"
        "500":
          $ref: '#/components/responses/InternalServerError'

  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: 操作対象のカテゴリID
        schema:
          type: integer
    patch:
      tags:
        - Category
      summary: カスタムカテゴリの編集
      description: |-
        指定されたIDのカテゴリ名を編集する
        - 編集対象はログインユーザーが作成したカスタムカテゴリのみ
        - カテゴリ名は必須
        - カテゴリ名は50文字以内
        - デフォルトカテゴリ及びログインユーザーのカスタムカテゴリ内で、カテゴリ名が重複しない
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        "200":
          description: カスタムカテゴリの更新が完了しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        "400":
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                name_required:
                  summary: (*2) カテゴリ名が空
                  value:
                    code: "CATEGORY_NAME_REQUIRED"
                    message: "カテゴリ名は必須です"
                name_too_long:
                  summary: (*3) カテゴリ名が50文字超過
                  value:
                    code: "CATEGORY_NAME_TOO_LONG"
                    message: "カテゴリ名は50文字以内で入力してください"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "403":
          description: 権限がありません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "DEFAULT_CATEGORY_IMMUTABLE"
                message: "デフォルトカテゴリは編集できません"
        "404":
          $ref: '#/components/responses/NotFoundResponse'
        "409":
          description: リソースが競合しています
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "CATEGORY_NAME_DUPLICATE"
                message: "そのカテゴリ名は既に使用されています"
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Category
      summary: カスタムカテゴリの削除 (論理削除)
      description: |-
        指定されたIDのカスタムカテゴリを論理削除する
        - 削除対象はログインユーザーが作成したカテゴリのみ
        - カテゴリに紐づくアイテムが存在しないこと
      responses:
        "200":
          description: カテゴリの論理削除に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
              example:
                id: 1
                name: "削除されたカテゴリ"
                deleted: true
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "403":
          description: 権限がありません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "DEFAULT_CATEGORY_IMMUTABLE"
                message: "デフォルトカテゴリは削除できません"
        "404":
          $ref: '#/components/responses/NotFoundResponse'
        "409":
          description: リソースが競合しています
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "CATEGORY_NOT_EMPTY"
                message: "アイテムが1件以上登録されているカテゴリは削除できません"
        "500":
          $ref: '#/components/responses/InternalServerError'

  #----------------------------------
  # アイテム関連
  #----------------------------------
  /items:
    get:
      tags:
        - Item
      summary: アイテム一覧を取得
      description: |-
        指定したカテゴリに属するアイテムの一覧を取得する
        - カテゴリIDに紐づくアイテムを取得
        - ログインユーザーが作成したデータを取得
        - deletedフラグがfalseのレコードのみが対象
        - 更新日が新しい順にソートして表示する
      parameters:
        - name: categoryId
          in: query
          required: true
          description: アイテムを取得したいカテゴリのID
          schema:
            type: integer
      responses:
        "200":
          description: アイテム一覧の取得に成功しました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: 指定されたカテゴリが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "CATEGORY_NOT_FOUND"
                message: "指定されたカテゴリが見つかりません"
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Item
      summary: アイテムを新規作成
      description: |-
        新しいアイテムを1件、指定したカテゴリに紐づけて作成
        - アイテム名、カテゴリは必須
        - アイテム名は50文字以内
        - 数量(quantity)を指定しない場合はデフォルトで0が設定される
        - 数量は0以上の整数
        - 同一カテゴリ内に同じアイテム名は登録できない
        - ログインユーザーが作成したカテゴリにのみ追加可能
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreateRequest'
      responses:
        "201":
          description: アイテムの作成に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        "400":
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                required_fields:
                  summary: (*1) 必須項目が不足
                  value:
                    code: "ITEM_FIELDS_REQUIRED"
                    message: "アイテム名とカテゴリは必須です"
                name_too_long:
                  summary: (*2) アイテム名が50文字超過
                  value:
                    code: "ITEM_NAME_TOO_LONG"
                    message: "アイテム名は50文字以内で入力してください"
                invalid_quantity:
                  summary: (*4) 数量が不正
                  value:
                    code: "INVALID_ITEM_QUANTITY"
                    message: "数量は0以上の整数で入力してください"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: 指定されたカテゴリが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "CATEGORY_NOT_FOUND"
                message: "指定されたカテゴリが見つかりません"
        "409":
          description: リソースが競合しています
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "ITEM_NAME_DUPLICATE"
                message: "そのアイテム名は既に登録されています"
        "500":
          $ref: '#/components/responses/InternalServerError'

  /items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        description: 操作対象のアイテムID
        schema:
          type: integer
    patch:
      tags:
        - Item
      summary: アイテムの編集
      description: |-
        指定されたIDのアイテム情報（名前、在庫数）を更新する
        - 編集対象はログインユーザーが作成したアイテムのみ
        - アイテム名は必須
        - アイテム名は50文字以内
        - 数量は0以上の整数
        - 同一カテゴリ内に同じアイテム名は登録できない
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdateRequest'
      responses:
        "200":
          description: アイテムの編集に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        "400":
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                name_required:
                  summary: (*1) アイテム名が空
                  value:
                    code: "ITEM_NAME_REQUIRED"
                    message: "アイテム名は必須です"
                name_too_long:
                  summary: (*2) アイテム名が50文字超過
                  value:
                    code: "ITEM_NAME_TOO_LONG"
                    message: "アイテム名は50文字以内で入力してください"
                invalid_quantity:
                  summary: (*4) 数量が不正
                  value:
                    code: "INVALID_ITEM_QUANTITY"
                    message: "数量は0以上の整数で入力してください"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "403":
          $ref: '#/components/responses/ForbiddenResponse'
        "404":
          $ref: '#/components/responses/NotFoundResponse'
        "409":
          description: リソースが競合しています
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: "ITEM_NAME_DUPLICATE"
                message: "そのアイテム名は既に登録されています"
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Item
      summary: アイテムの削除 (論理削除)
      description: |-
        指定されたIDのアイテムを論理削除する
        - 削除対象はログインユーザーが作成したアイテムのみ
      responses:
        "200":
          description: アイテムの論理削除に成功しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
              example:
                id: 101
                categoryId: 1
                name: "削除されたアイテム"
                quantity: 0
                deleted: true
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "403":
          $ref: '#/components/responses/ForbiddenResponse'
        "404":
          $ref: '#/components/responses/NotFoundResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

# 再利用可能なコンポーネントの定義
components:
  # セキュリティスキーマの定義 (Firebase認証)
  securitySchemes:
    FirebaseBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Firebase Authenticationで発行されたIDトークンをBearerトークンとして指定してください。
        サーバーサイドでは、Spring SecurityとFirebase Admin SDKを利用してトークンの検証を行います。

  # データスキーマ (リクエスト/レスポンスのモデル)
  schemas:
    # Category Schemas
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          description: カテゴリID
          example: 1
        name:
          type: string
          description: カテゴリ名
          example: キッチン
    CategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 新規作成するカテゴリ名
          example: 洗濯
    CategoryUpdateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 更新後のカテゴリ名
          example: トイレ
        deleted:
          type: boolean
          description: 論理削除フラグ
          example: false

    # Item Schemas
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          description: アイテムID
          example: 101
        categoryId:
          type: integer
          description: 紐づくカテゴリのID
          example: 1
        name:
          type: string
          description: アイテム名
          example: ティッシュペーパー
        quantity:
          type: integer
          description: 在庫数
          example: string
        price:
          type: string
          description: 購入価格
          example: 500
        place:
          type: string
          description: 購入場所
          example: ABCドラッグストア
        deleted:
          type: boolean
          description: 論理削除フラグ
          example: false

    ItemCreateRequest:
      type: object
      required:
        - name
        - categoryId
      properties:
        categoryId:
          type: integer
          description: 紐付けるカテゴリのID
          example: 1
        name:
          type: string
          description: 新規作成するアイテム名
          example: トイレットペーパー
        quantity:
          type: integer
          description: 在庫数 (指定しない場合は0)
          default: 0
          example: 12
        price:
          type: string
          description: 購入価格
          example: 500
        place:
          type: string
          description: 購入場所
          example: ABCドラッグストア
    ItemUpdateRequest:
      type: object
      required:
        - name
        - quantity
      properties:
        name:
          type: string
          description: 更新後のアイテム名
          example: キッチンペーパー
        quantity:
          type: integer
          description: 更新後の在庫数 (0以上の整数)
          minimum: 0
          example: 5
        price:
          type: string
          description: 購入価格
          example: 500
        place:
          type: string
          description: 購入場所
          example: ABCドラッグストア

    # Error Schema
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: エラーの種類を示すコード
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: エラーの詳細メッセージ
          example: "リクエストに問題があります"

  # 共通のレスポンス定義
  responses:
    UnauthorizedResponse:
      description: 認証が必要です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "UNAUTHORIZED_ERROR"
            message: "認証が必要です"
    ForbiddenResponse:
      description: 権限がありません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "FORBIDDEN_ERROR"
            message: "要求された操作を実行する権限がありません"
    NotFoundResponse:
      description: 該当リソースが存在しません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "NOT_FOUND_ERROR"
            message: "該当のリソースが見つかりません"
    InternalServerError:
      description: サーバー内部で予期せぬエラーが発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "INTERNAL_SERVER_ERROR"
            message: "サーバー内部でエラーが発生しました"
